<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1" />
    <meta name="description" content="" />
    <meta name="author" content="" />
    <!--[if IE]>
        <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
        <![endif]-->
     <!-- Favicon Icon -->
    <link rel="icon" href="images/favicon.ico" />
    <title>Thanks Mate!</title>

    <!--  
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage 
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.
        
        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:
            
            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/bootstrap.css">
    <link rel="stylesheet" href="/styles/font-awesome.css">
    <link rel="stylesheet" href="/styles/importer.css">
    <link rel="stylesheet" href="/styles/ionicons.css">
    <link rel="stylesheet" href="/styles/style.css">
    <!--STYLES END-->
  </head>

  <body>

  <!-- HEADER SECTION START-->
  <header id="header">
    <div class="container" >
      <div class="row"  >
        <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12 logo-wrapper">
          <h2 style="margin: 0px;"><a class="aheader" href="/">10x Mate</a>
            <% if (req.session.user) { %>
               | <a class="aheader" href="/user/<%= req.session.user.id %>"><%= req.session.name %><a href="/logout" class="exit">X</a>
            <% } %>
            <% if (req.session.partner) { %>
               | <a class="aheader" href="/user/<%= req.session.partner.id %>"><%= req.session.name %><a href="/logout" class="exit">X</a>
            <% } %>
          </h2>
        </div>
        <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12 text-right" >
          <div class="menu-links scroll-me">
            <a href="/#header"> <i class="ion-ios-home-outline"></i> </a>
            <a href="/#about"> <i class="ion-ios-camera-outline"></i> </a>
            <a href="/#clients"> <i class="ion-ios-grid-view-outline"></i> </a>
            <a href="/#contact"> <i class="ion-ios-chatboxes-outline"></i> </a>
          </div>
        </div>
      </div>
    </div>
   </header>

    <%- body %>

    <!-- FOOTER SECTION END-->

    <!-- JAVASCRIPT FILES PLACED AT THE BOTTOM TO REDUCE THE LOADING TIME  -->
    <!-- CORE JQUERY  SCRIPTS -->



    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).
        
        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can 
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.
      
      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:
          
          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/js/dependencies/sails.io.js"></script>
    <script src="/js/dependencies/ie-10-view-port.js"></script>
    <script src="/js/dependencies/jquery-1.11.1.js"></script>
    <script src="/js/dependencies/jquery.easing.min.js"></script>
    <script src="/js/bootstrap.js"></script>
    <script src="/js/custom.js"></script>
    <!--SCRIPTS END-->
  </body>
</html>
